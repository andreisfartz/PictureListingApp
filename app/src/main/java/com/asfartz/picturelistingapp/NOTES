Side notes:

To generate test class for a class:
    CTRL + SHIFT + T  >  Create New Test...
    ALT + INSERT(Right-click + Generate)  >  Test...

UI Automator - for running tests which can go outside of your app:
    https://goo.gl/6H6pZd  /  https://developer.android.com/training/testing/ui-automator.html


----------------- Tests -----------------

    In Android Apps, you should separate your tests so that you may cover both the Logic, and the UI (which preferably should be as separated as possible)

    Espresso takes care of UI testing. It installs a test APK which sends UI events (typing, taps, swipes, ...) to the real app, and observes what happens.
    Espresso only works within a single app. If you want to test scenarios that spread to multiple apps, you need UI Automator.
    Espresso allows Gray Box Testing (refer to elements by their resource id, and have access to the app code, so you can use it's constants)



----------------- Issues -----------------

    UI Testing can be 'flacky' due to timing issues.
    Ex: your test code tries to click on a button before the button has been rendered. So UI events can be sent before the app is ready, which can make tests fail.
    Espresso solves this problem by checking the Main Thread Message Queue before sending any UI events.
    The Main Thread Message Queue contains instructions for the app to render elements on screen. When its not empty, it means rendering is not done.
    Before Espresso performs any action, it checks to see if the queue is empty. If not, it waits for it to be empty, then sends it's UI events.



----------------- Async Tasks -----------------

    Espresso waits for all Async tasks to finish before running it's UI events and tests.



----------------- Espresso Formula 1 -----------------

    onView(ViewMatcher) .perform(ViewAction) .check(ViewAssertion)

    1.onView(ViewMatcher) - locate the view on the screen
        Why not findViewById(...) ? That's what we use normally in Activity / Fragment
        Because of synchronization. When calling onView, Espresso waits for the app to be idle = views have been rendered, and there are no pending async tasks
        If we used findViewById(...), we could end up sending UI Events when the app isn't ready. So it would send events to it before it's rendered. The test would fail because of timing issues
    2.perform(ViewAction) - perform an action on the view. Clicking, typing, ...
    3. check(ViewAssertion) -

Hamcrest methods cheat sheet:  https://goo.gl/NQmM4F  /  https://www.marcphilipp.de/downloads/posts/2013-01-02-hamcrest-quick-reference/Hamcrest-1.3.pdf
Espresso cheat sheet:          https://goo.gl/6H6pZd  /  https://developer.android.com/training/testing/espresso/cheat-sheet.html

    Sometimes, when you can't use onView( ..id..) because of the view not having an id (toolbar title), you can
    use work arounds to reach it instead. See MainActivityTest.kt ---> fun toolbarTitle()

----------------- Espresso Formula 2 -----------------

    onView..perform..check.. doesn't work for ListView & other adapter views. An Adapter view is a View that is backed by an adapter that contains the data (ListView, RecyclerView)
    It shows a large data set effectively by maintaining a pool of item views and reusing them as they appear/disappear when scrolling.
    We want to scroll until the item view containing the data we want to test is visible. So we're not trying to match a view, we're matching a piece of data.

    onData(ObjectMatcher) .DataOptions .perform(ViewAction) .check(ViewAssertion)

For RecyclerView:
    ListView is a child of AdapterView, and   onData(...)  loads items of type AdapterView  (e.g. ListView).
    RecyclerView does not descend from AdapterView, so onData won't work on it.
    We need to use RecyclerViewActions. According to documentation, in order to use RecyclerViewActions, use onView(Matcher) with a Matcher that matches the RecyclerView, then perform a ViewAction from this class.

    onVoew(ViewMAtcher) .perform(RecyclerViewAction) .check(ViewAssertion)




----------------- Espresso Test Recorder -----------------

https://developer.android.com/studio/test/espresso-test-recorder

    This tool lets your create UI tests without writing any test code.
    From Android Studio > tab 'Run' > 'Record Espresso Test' >>>
    >>> Do an Action > Add an assertion > Repeat previos 2 steps for what you wish to test >>>
    >>> Generate test code

    Note however that there may be differences in imports / best-practices, since Espresso and
    Espresso Recorder are maintained by separate teams



----------------- JUnit Annotations -----------------

@BeforeClass - static method - executed once, before running the test class
@AfterClass - static method - executed once, after running the test class

@Before - method - executed before each test
@After - method - executed after each test

@Rule - Generic reusable functionality for each test.
        You can create custom rules by implementing TestRule or MethodRule, or by extending
        existing implementations like ExternalResource, TemporaryFolder, etc
@ClassRule - similar to above, but static

InstrumentationRegistry - an exposed registry instance that holds a ref to the instrumentation running in the process and it's arguments
    getInstrumentation() - the Instrumentation currently running
            getContext() - the Context of this Instrumentation's package, the test apk (which doesn't contain the string res of the app)
            getTargetContext() - the application Context of the target application, the app apk
            getArguments() - copy of arguments Bundle. Useful for accessing the command line args passed to the Instrumentation for the test


When running Instrumentation tests, there are 2 apps: the 'real' app, and the 'test' app.
    load a res from real app: getTargetContext()
    load a res from test app: getContext()



----------------- Intents -----------------

Check tests for 'catnames' package:
    Launch an Activity with an Intent which holds an extra.


ActivityTestRule(MyActivity::class.java, initialTouchMode = true, launchActivity = false)
initialTouchMode - ??
launchActivity - this determines if the rule will automatically start the activity, when the Test method starts.
                 When using the ActivityTestRule constructor with just the class name, it's by default set to true.
                 When it's false, we need to call launchActivity(Intent) on the ActivityTestRule, otherwise the Activity won't be started at the beginning of the Test

Outgoing Intents:
    Check that an Activity is properly launched, with the proper EXTRAs, is to use Espresso-Intents
    https://goo.gl/8okA8F  /  https://developer.android.com/training/testing/espresso/intents.html
    Espresso-Intents = extension of Espresso, for validating and stubbing Intents


Both Intents.intended and Intents.intending check the outgoing Intent of an Activity
Intents.indended() - just watches what happens. So it just launches the Activity and records the Intent passed to it
Intents.indenting() - intercepts the Intent, and blocks the Activity from launching. This is great for stubbing the Activity Result

example Stubbing Activity result:
    Intents.indenting(Matcher<Intent!>!).respondsWith(ActivityResult)




----------------- Dependancy Injection & Mockito -----------------

Check tests for 'germetic' package:
    We moved the DateTime() from GreetingMainActivity, to the Application class as getClock().getNow(),
    because the testing framework has a mechanism to instantiate a different Application during test.

    By placing the external dependency in the Application class, we can provide a different one during test.
    Instead of a clock that provides the actual time, we'll have one providing a fixed time during test.


    After creating the TestApplication:
    - create a new class CustomTestRunner that extends AndroidJUnitRunner.
    - override the newApplication method, and replace the className returned parameter with packageName.Name of the TestApplication
        "com.asfartz.picturelistingapp.hermetic.TestApplication"

    - in the App level (Module: ...) gradle file, notice in the defaultConfig block that we're using
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

      But we want to use our CustomTestRunner instead. so replace it with:
        testInstrumentationRunner "com.asfartz.picturelistingapp.hermetic.CustomTestRunner"

    - Now for the actual test:
          - get the Application:
              val app = InstrumentationRegistry.getInstrumentation().targetContext.applicationContext as TestApplication
          - Override the getNow() method for your mocked Clock:
              override fun getNow(): DateTime { return DateTime().withHourOfDay(20) }



    Alternatively: use Mockito, to create the test-version of Clock
    - import mockito:     androidTestImplementation 'org.mockito:mockito-android:2.13.0'
    - in TestApplication, change the mock Clock here to be a Mockito Clock
        from:   private lateinit var clock: Clock
        to: private val clock: Clock by lazy { Mockito.mock(Clock::class.java) }
      and remove the setter.
      Now this Mockito Clock is going to be used whenever someone calls provideClock()

    - in the Test class, remove the usage of the setter.
       And replace it with:
            val clock = app.provideClock()
            Mockito.`when`(clock.getNow()).thenReturn(DateTime().withHourOfDay(20))

       ^ specify that when clock.getNow() is called, Mockito will have that method return the block in thenReturn(...)
         the semi-colons 'when' are necessary because when is also a keyboard in Kotlin





